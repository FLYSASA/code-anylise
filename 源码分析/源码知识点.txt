1. el-table的使用
在某一项定义 slot-scope="props",
将会把:data="tableData"的值等于props
prop变成props的key,用于展示table某一行的内容

--------------------------------------------
2. 在项目文件夹src > static里:

①i18n文件夹:  相当于公共的data库,用于标题label等等
  
其目录下分为common(公共)和plat(某个模块)文件目录

文件夹内部继续细分为多语言 zh-cn 和 zh-tw语言目录

在zh-cn下继续细分为文件夹(以模块命名)和模块js(用于引入文件夹定义的对象)

$t()是绑定在Vue实例上的属性,在data中通过this.$t()调用,在html中直接 $t()即可获取,前提是需要在main.js中引入

在以模块命名的文件夹中的js文件,一个文件封装一个对象,可以在组件中通过 $t(对象.属性)获取到值.  多用于标题输入框标题表格文字等.

② js文件夹: 封装共用的方法

common.js : {

在Vue.prototype上封装了 $get $post $put $delete $request $getUrlParams等等

同时也定义了params等等.

调用这些方法直接 this.$delete(参数) 即可.


}

---------------------------------------------------
3. 关于list.vue文件中的 v-if="permissions.Add || permissions.Delete || permissions.Import ||  permissions.Export" 控制对应图标显示

permissions(权限)从哪儿来? 

在Web/src/pages/plat/admin/main   设置权限资源


---------------------------------------------------
4. 详细某些组件用法可以在 src/pages/demo 里面看到

-----------------------------------------------------

5. 项目业务开展具体流程:

① 比较常见的是在plat模块下开发新的版块. 比如新开供方管理模块,新建plat < supplier文件夹.

② 后台系统绑定,右上角 菜单管理 > 新增同级
设置菜单名称(如供方管理),链接地址(如/plat/supplier.html#/), 设置根节点, 根节点不需要设置权限资源

③ 新增子级, 设置菜单名称(如供方一览),链接地址(如/plat/supplier.html#/employee),设置权限资源((如勾选新增 修改 删除 导入 导出等等) 设置资源名称时添加路径 即 对照api 地址填写即可. 

④ 后台新增版块完成之后,开始实际开发. 


-----------------------------------------------------------
6. deleteIds 参见supplier > employee下的list.vue
如果数据并不会影响到视图变化,不建议放到data中,统一在created钩子函数中定义


------------------------------------------------------------

7. 组件/实例的选项顺序:

// 副作用: 触发组件外的影响
el,

// 模板依赖: 模板内使用的资源
components: {},

// 组合: 向选项里合并属性 
mixins: [],

// 组件的接口: 父组件传递过来的属性
props: [],

// 本地状态: 本地的响应式属性
data(){
  return {}
},

computed(){},

// 观察本地属性
watch: {

},

// 非响应式的属性(每次都重新计算)
methods: {
  loadData(){}
}

// 生命周期钩子: 按照被调用的顺序
beforecreated(){}    
created(){}
beforeMount(){}
mounted(){}
Destroyed(){}


--------------------------------------------
8. minxins 混入属性 混入的属性见 src < static < common.js

混入对象的钩子将在组件自身钩子之前调用。

----------------------------------------------
9. v-bind:is=""  is特性 切换不同组件, 见 https://cn.vuejs.org/v2/guide/components.html

v-bind:is="currentTabComponent"

v-bind:is="" is特性后面可以是
① 已注册组件的名字
② 或者一个组件的选项对象

10. 异步组件:
在大型应用中,我们需要将应用分割成小一些的代码块,并且只在需要的时候才从服务器加载一个模块.
vue只有在这个组件需要被渲染的时候才会被触发,从而获取组件.
vue允许你以一个工厂函数的方式定义你的组件(在工厂函数里定义template等等).

https://cn.vuejs.org/v2/guide/components-dynamic-async.html

components: {
	// "employee-add": (resolve) => {
	// 	require(['./add.vue'], resolve);  //这个require语法常见于异步组件中,会告诉webpack自动将构建代码切割成多个包,这些包会通过Ajax请求加载.
	// },
	//简写:
	"employee-add": () => import('./add.vue'),   // webpack 2和ES6语法  import函数会返回一个Promise对象
	"employee-edit": () => import('./edit.vue'),
	"employee-view": () => import('./view.vue'),
},

---------------------------------------------
10. 创建的vue根实例在
import initImport from "@/static/js/mainBaseImport.js";

----------------------------------------------
11.  一个组件上的 v-model默认会利用名为value的prop和 名为 input 的事件
https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model

props: ["option", "value"],     //在父组件中绑定v-model="xxx",则相当于给子组件传递了 props: ['value']

props是单向的,父组件-> 子组件


12. nextTick()  实例方法  
https://cn.vuejs.org/v2/guide/reactivity.html#异步更新队列

当将某个data更新时,如 this.someData = 'new value', 该组件不会立即重新渲染. 

只有在事件循环队列清空时的下一个'tick'里 更新.  

如果我们想在DOM更新后,立刻做点什么,就可以使用 this.nextTick(callback)

为了在数据变化之后等待Vue完成更新DOM,可以在数据变化之后立即使用 nextTick(callback). 这样回调函数在DOM更新完成后就会调用.


13. <el-table>   http://element-cn.eleme.io/#/zh-CN/component/table

通过 Scoped slot 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据

<el-table-column          prop="Sex"     :label="$t('employee.contactSex')"      width="120"       show-overflow-tooltip>
	<template   slot-scope="props" >
		{{props.row.Sex === 0 ? $t('employee.sexData.man'):$t('employee.sexData.woman')}}
	</template> 
</el-table-column>

:data 为注入的数据data
lable为显示的标题
prop 是对应列的内容

在el-table-column 内部可以自定义列内容,使用 template  和 slot-scope. 
slot-scope  其属性有 { row, column, $index }  , 通过获取slot-scope的属性  来展示内容


14.  于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除

后台返回数据,直接赋值data声明的对象,这样的赋值有很多问题，不是响应式的，无法更新，如果返回的data中有二级的对象或者数字，绑定该字段就会出现报错。。。
对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。

this.$set(this.editModel, 'EnterpriseForm', 1);       // vm.$set( target, key, value )

举例: 
var vm = new Vue({
  data: {
    a: 1
  }
})
// `vm.a` 现在是响应式的

vm.b = 2
// `vm.b` 不是响应式的


15.  如果在data选项中定义 editModel为空对象的话,
尽量在后台获取到数据之后不要 直接  this.editModel = res
因为如果res对象有多个属性,则editModel 的属性属于后添加不具备响应式

解决办法:
1. 在data中定义的时候,将editModel的属性和后台一致 ,值可以定义为null
2. 在获取到后台数据后,然后 使用 this.editModel = res 替换属性值
3. 也可以通过 this.editModel.xxx = res.xxx 来更新属性值
4. 也可以 通过  this.$set(this.editModel, 'EnterpriseForm', 1), 增加原来没有的新属性以及值

16. 总结sapi-select下拉框的使用

① 需要传入 :data  一般从后台获取.首先在data选项中声明,一般是个数组,
如: priseFormDatas : [{label:"民营企业",value:2},{label:"国营企业", value: 1}]
label属性对应的是每一项的内容
value属性对应的是v-model的值

② 需要传入props ,配置选项,data中的每个属性都需要在这里声明一下, 其实props就是每一项的缩影
如: 
props: {              // 下拉选项配置内容
	label:"label",	// label是每一项展示内容
	value: 'value'	// value根据值展示不同label,可以通过绑定的v-model 得到value

③ 需要传入 v-model
如: 
v-model="editModel.EnterpriseForm"    // 绑定之后得到value值, value值不同展示不同label
},

④ 需要传入 @change = "formChange"事件  ,用户下拉选择不同项后触发
如: 
formChange(datas) {                // datas是用户选的某一项如 {label:"民营企业",value:2}
	if(datas.label === '民营企业'){
		this.editModel.EnterpriseForm = 2
	}else if(datas.label === '国营企业'){
		this.editModel.EnterpriseForm = 1
	}
},